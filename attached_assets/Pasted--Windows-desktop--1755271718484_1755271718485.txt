برومبت شامل لإنشاء تطبيق إدارة محل الموبايلات
المتطلبات الأساسية
قم بإنشاء تطبيق Windows desktop باستخدام Python مع واجهة مستخدم حديثة ومتكاملة لإدارة محل الموبايلات. استخدم المكتبات التالية:
•	Tkinter أو CustomTkinter للواجهة الرئيسية
•	SQLite لقاعدة البيانات
•	Pillow (PIL) للتعامل مع الصور
•	openpyxl لتصدير التقارير إلى Excel
•	matplotlib للرسوم البيانية والإحصائيات
1. واجهة المستخدم (UI Design)
التصميم العام:
•	استخدم CustomTkinter لواجهة حديثة ومظهر عصري
•	نظام ألوان متدرج (Dark/Light theme)
•	شريط جانبي للتنقل السريع
•	نوافذ متعددة التبويبات (Tabbed Interface)
•	أيقونات حديثة لكل وظيفة
•	شاشة رئيسية بها dashboard مع إحصائيات سريعة
الشاشة الرئيسية (Dashboard):
- إجمالي المبيعات اليومية/الشهرية
- عدد الأجهزة المباعة
- المخزون المنخفض (تنبيهات)
- العملاء الجدد
- الإيرادات والأرباح
- رسوم بيانية للمبيعات
2. إدارة المنتجات والمخزون
وظائف المطلوبة:
•	إضافة منتجات جديدة مع:
o	اسم المنتج وموديل الجهاز
o	العلامة التجارية (Samsung, Apple, Xiaomi, إلخ)
o	سعر الشراء وسعر البيع
o	الكمية المتاحة
o	مواصفات تفصيلية (الذاكرة، اللون، الحالة)
o	صور المنتج
o	باركود/QR Code للمنتج
•	إدارة المخزون:
o	تتبع حركة المخزون (دخول/خروج)
o	تنبيهات للمخزون المنخفض
o	جرد دوري للمخزون
o	تقارير المخزون المفصلة
•	فئات المنتجات:
o	هواتف ذكية جديدة
o	هواتف مستعملة
o	إكسسوارات (جرابات، شواحن، سماعات)
o	قطع غيار
o	بطاقات شحن
3. نظام المبيعات
نقطة البيع (POS):
•	واجهة مبيعات سريعة وبديهية
•	بحث سريع بالاسم أو الباركود
•	حساب المجموع والضرائب تلقائياً
•	طرق دفع متعددة (نقداً، تحويل كاش، تقسيط)
•	إمكانية الخصم والعروض

4. إدارة العملاء
بيانات العملاء:
•	معلومات شخصية (الاسم، الهاتف، العنوان)
•	تاريخ المشتريات
•	المبلغ الإجمالي للمشتريات
•	نقاط الولاء
•	ملاحظات خاصة
خدمات العملاء:
•	نظام نقاط الولاء والمكافآت
•	تتبع فترات الضمان
•	تذكير بانتهاء الضمان
•	عروض خاصة للعملاء المميزين
5. إدارة الصيانة والخدمات
استقبال أجهزة الصيانة:
•	تسجيل بيانات الجهاز والعيب
•	تقدير التكلفة ووقت الإصلاح
•	متابعة حالة الصيانة
•	إشعارات للعميل عند اكتمال الصيانة
•	فاتورة الصيانة المفصلة
إدارة الفنيين:
•	تخصيص المهام للفنيين
•	تتبع الإنتاجية
•	تقييم الأداء
6. إدارة المال والحسابات
الحسابات المالية:
•	تتبع الإيرادات والمصروفات
•	حساب الأرباح والخسائر
•	إدارة النقدية والخزينة
•	تقارير مالية مفصلة
إدارة الموردين:
•	بيانات الموردين
•	فواتير الشراء
•	المدفوعات والمستحقات
•	تقييم أداء الموردين
7. التقارير والإحصائيات
تقارير شاملة:
•	تقرير المبيعات اليومي/الأسبوعي/الشهري
•	تقرير المخزون الحالي
•	تقرير الأرباح والخسائر
•	تقرير أفضل المنتجات مبيعاً
•	تقرير العملاء الأكثر شراءً
•	تقارير الصيانة المكتملة
الرسوم البيانية:
•	رسم بياني لاتجاهات المبيعات
•	توزيع المبيعات حسب الفئات
•	مقارنة الأداء الشهري
8. النسخ الاحتياطي والأمان
النسخ الاحتياطي:
•	نسخ احتياطية تلقائية للبيانات
•	النسخ الاحطياتي الي جوجل درايف او ون درايف
•	استعادة البيانات من النسخ الاحتياطية
•	تصدير البيانات إلى Excel/PDF
9. الميزات الإضافية
وظائف متقدمة:
•	نظام الإشعارات والتذكيرات
•	ربط بطابعة الفواتير والباركود
•	قارئ الباركود/QR Code
•	ربط مع وسائل التواصل الاجتماعي
التخصيص:
•	إعدادات المحل (الاسم، العنوان، الشعار)
•	تخصيص شكل الفاتورة
•	إعدادات الضرائب والعملة
•	لغات متعددة (عربي/إنجليزي)
10. متطلبات التطوير التقنية
بنية المشروع:
mobile_shop_management/
├── main.py                 # الملف الرئيسي
├── database/
│   ├── db_manager.py      # إدارة قاعدة البيانات
│   └── models.py          # نماذج البيانات
├── gui/
│   ├── main_window.py     # النافذة الرئيسية
│   ├── sales_window.py    # نافذة المبيعات
│   ├── products_window.py # نافذة المنتجات
│   └── reports_window.py  # نافذة التقارير
├── utils/
│   ├── helpers.py         # وظائف مساعدة
│   └── printing.py        # وظائف الطباعة
├── resources/
│   ├── images/           # صور التطبيق
│   └── icons/            # أيقونات
└── requirements.txt      # المكتبات المطلوبة
مكتبات Python المطلوبة:
customtkinter>=5.0.0
sqlite3
Pillow>=9.0.0
openpyxl>=3.0.0
matplotlib>=3.5.0
reportlab>=3.6.0
python-barcode>=0.13.0
qrcode>=7.3.0
11. كود البداية المقترح
إعداد قاعدة البيانات:
import sqlite3
from datetime import datetime

class DatabaseManager:
    def __init__(self, db_name="mobile_shop.db"):
        self.db_name = db_name
        self.create_tables()
    
    def create_tables(self):
        # إنشاء جداول المنتجات، العملاء، المبيعات، الصيانة
        pass
الواجهة الرئيسية:
import customtkinter as ctk

class MobileShopApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("نظام إدارة محل الموبايلات")
        self.geometry("1200x800")
        self.setup_ui()
    
    def setup_ui(self):
        # إعداد الواجهة الرئيسية
        pass
12. خطة التطوير المرحلية
المرحلة الأولى (الأساسيات):
1.	إعداد قاعدة البيانات
2.	الواجهة الرئيسية
3.	إدارة المنتجات الأساسية
4.	نظام المبيعات البسيط
المرحلة الثانية (التطوير):
1.	إدارة العملاء
2.	التقارير الأساسية
3.	نظام الصيانة
المرحلة الثالثة (المتقدمة):
1.	الرسوم البيانية
2.	النسخ الاحتياطي
3.	الطباعة والباركود
4.	الميزات الإضافية
هذا المشروع سيكون شاملاً ومتكاملاً لإدارة جميع جوانب محل الموبايلات بكفاءة عالية.

